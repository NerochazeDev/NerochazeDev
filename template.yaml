AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Nerochaze Portfolio Website

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - test
      - prod
    Description: The deployment environment

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        DATABASE_URL: !Sub '{{resolve:secretsmanager:${Environment}-portfolio-secrets:SecretString:DATABASE_URL}}'
        TELEGRAM_BOT_TOKEN: !Sub '{{resolve:secretsmanager:${Environment}-portfolio-secrets:SecretString:TELEGRAM_BOT_TOKEN}}'

Resources:
  PortfolioApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: dist/index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetRequest:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: GET
        PostRequest:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: POST
        PutRequest:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: PUT
        DeleteRequest:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: DELETE

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DatabaseAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}-portfolio-secrets-*'

  PortfolioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'nerochaze-portfolio-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  PortfolioBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PortfolioBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${PortfolioBucket}/*'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub '${PortfolioBucket}.s3-website-${AWS::Region}.amazonaws.com'
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  S3BucketName:
    Description: S3 Bucket for static assets
    Value: !Ref PortfolioBucket